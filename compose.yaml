# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# services:
#   web:
#     build:
#       context: .
#     environment:
#       NODE_ENV: development
#     ports:
#       - 3000:3000
#     develop:
#       watch:
#         - path: Dockerfile
#           action: rebuild
#         - path: package.json
#           action: rebuild
#         - path: package-lock.json
#           action: rebuild
#         - path: next.config.ts
#           action: rebuild
#         - path: .
#           target: /app
#           action: sync
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

# version: '3.8'

# services:
#   web:
#     build:
#       context: .
#       target: ${BUILD_TARGET:-dev}  # Use target stages: dev or runner
#     environment:
#       - NODE_ENV=${NODE_ENV:-development}
#     ports:
#       - "3000:3000"
#     volumes:
#       - /app/node_modules
#     develop:
#       watch:
#         - path: Dockerfile
#           action: rebuild
#         - path: package.json
#           action: rebuild
#         - path: package-lock.json
#           action: rebuild
#         - path: next.config.ts
#           action: rebuild
#         - path: .
#           target: /app
#           action: sync
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:3000"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

# comopose.yml file

services:
  web:
    build:
      context: .
      target: ${BUILD_TARGET:-prod-runner} # prod-runner
      args:
        - NODE_ENV=${NODE_ENV:-production}
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - "3000:3000"
    restart: unless-stopped
    healthcheck:
      # test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: 1G
